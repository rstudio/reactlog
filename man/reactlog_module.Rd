% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinyModule.R
\name{reactlog_module_ui}
\alias{reactlog_module_ui}
\alias{reactlog_module_server}
\title{Reactlog Shiny Module}
\usage{
reactlog_module_ui(include_refresh = TRUE, id = "reactlog_module")

reactlog_module_server(
  id = "reactlog_module",
  width = "100\%",
  height = 600,
  ...
)
}
\arguments{
\item{include_refresh}{should the ifram refresh button be included?}

\item{id}{\pkg{shiny} module id to use}

\item{width, height}{HTML attributes to be applied to the reactlog iframe}

\item{...}{parameters passed to \code{\link[shiny:actionButton]{shiny::actionButton()}}}
}
\description{
Displays an iframe of the reactlog in the given application.
}
\details{
State will not be preserved between refreshes.
}
\examples{
if (!require("shiny")) {
  message("`shiny` required to run example")
  return()
}

library(shiny)
# Enable reactlog
reactlog::reactlog_enable()

# Define UI for app that draws a histogram ----
ui <- fluidPage(
  titlePanel("Hello Shiny!"),
  sidebarLayout(
    sidebarPanel(
      sliderInput(inputId = "bins", label = "Number of bins:",
                  min = 1, max = 50, value = 30)
    ),
    mainPanel(plotOutput(outputId = "distPlot"))
  ),
### start ui module
  reactlog::reactlog_module_ui(id = "reactlog")
### end ui module
)

server <- function(input, output, session) {

  output$distPlot <- renderPlot({
    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    hist(x, breaks = bins, col = "#75AADB", border = "white",
        xlab = "Waiting time to next eruption (in mins)",
        main = "Histogram of waiting times")
  })

### start server module
  reactlog::reactlog_module_server()
### end server module

}

if (interactive()) {
  shinyApp(ui = ui, server = server)
}
}
\seealso{
\code{\link[shiny:moduleServer]{shiny::moduleServer()}}
}
